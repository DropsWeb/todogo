// Code generated by go-swagger; DO NOT EDIT.
// Auto configures api handlers Implementations.

package swagger

import (
	"crypto/tls"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/DropsWeb/todogo/internal/services"
	"github.com/DropsWeb/todogo/pkg/swagger/ops"
)

//go:generate swagger generate server --target ../../../todo-go --name TodoAPI --spec ../../swagger-api/swagger.yml --api-package ops --model-package pkg/swagger/models --server-package pkg/swagger --implementation-package github.com/DropsWeb/todogo/internal/services --principal interface{} --exclude-main

// This file auto configures the api backend implementation.
// services package must already exist.
// services.New() is implemented by user, and must return an object
// or interface that implements Handler interface defined below.
var Impl Handler = services.New()

// Handler handles all api server backend configurations and requests
type Handler interface {
	Authable
	Configurable
	OpsHandler
}

// Configurable handles all server configurations
type Configurable interface {
	ConfigureFlags(api *ops.TodoAPIAPI)
	ConfigureTLS(tlsConfig *tls.Config)
	ConfigureServer(s *http.Server, scheme, addr string)
	CustomConfigure(api *ops.TodoAPIAPI)
	SetupMiddlewares(handler http.Handler) http.Handler
	SetupGlobalMiddleware(handler http.Handler) http.Handler
}

// Authable handles server authentication
type Authable interface {
	// Applies when the "Authorization" header is set
	BearerAuth(token string) (interface{}, error)
}

/* OpsHandler  */
type OpsHandler interface {
	/* DeleteTasksID Delete task by id */
	DeleteTasksID(params ops.DeleteTasksIDParams, principal interface{}) middleware.Responder
	/* GetTasks Return a list of tasks */
	GetTasks(params ops.GetTasksParams, principal interface{}) middleware.Responder
	/* GetTasksID Return task by id */
	GetTasksID(params ops.GetTasksIDParams, principal interface{}) middleware.Responder
	/* PatchTasksID Update task by id */
	PatchTasksID(params ops.PatchTasksIDParams, principal interface{}) middleware.Responder
	/* PostAuthLogin Login by email and password */
	PostAuthLogin(params ops.PostAuthLoginParams) middleware.Responder
	/* PostAuthRegister Register new user */
	PostAuthRegister(params ops.PostAuthRegisterParams) middleware.Responder
	/* PostTasks Create task */
	PostTasks(params ops.PostTasksParams, principal interface{}) middleware.Responder
}

func configureFlags(api *ops.TodoAPIAPI) {
	Impl.ConfigureFlags(api)
}

func configureAPI(api *ops.TodoAPIAPI) http.Handler {

	api.ServeError = errors.ServeError

	api.UseSwaggerUI()

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	// Applies when the "Authorization" header is set
	api.BearerAuth = func(token string) (interface{}, error) {
		return Impl.BearerAuth(token)
	}

	api.DeleteTasksIDHandler = ops.DeleteTasksIDHandlerFunc(func(params ops.DeleteTasksIDParams, principal interface{}) middleware.Responder {
		return Impl.DeleteTasksID(params, principal)
	})
	api.GetTasksHandler = ops.GetTasksHandlerFunc(func(params ops.GetTasksParams, principal interface{}) middleware.Responder {
		return Impl.GetTasks(params, principal)
	})
	api.GetTasksIDHandler = ops.GetTasksIDHandlerFunc(func(params ops.GetTasksIDParams, principal interface{}) middleware.Responder {
		return Impl.GetTasksID(params, principal)
	})
	api.PatchTasksIDHandler = ops.PatchTasksIDHandlerFunc(func(params ops.PatchTasksIDParams, principal interface{}) middleware.Responder {
		return Impl.PatchTasksID(params, principal)
	})
	api.PostAuthLoginHandler = ops.PostAuthLoginHandlerFunc(func(params ops.PostAuthLoginParams) middleware.Responder {
		return Impl.PostAuthLogin(params)
	})
	api.PostAuthRegisterHandler = ops.PostAuthRegisterHandlerFunc(func(params ops.PostAuthRegisterParams) middleware.Responder {
		return Impl.PostAuthRegister(params)
	})
	api.PostTasksHandler = ops.PostTasksHandlerFunc(func(params ops.PostTasksParams, principal interface{}) middleware.Responder {
		return Impl.PostTasks(params, principal)
	})

	api.PreServerShutdown = func() {}

	api.ServerShutdown = func() {}

	// CustomConfigure can override or add to configurations set above
	Impl.CustomConfigure(api)

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
	Impl.ConfigureTLS(tlsConfig)
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
	Impl.ConfigureServer(s, scheme, addr)
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return Impl.SetupMiddlewares(handler)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return Impl.SetupGlobalMiddleware(handler)
}
