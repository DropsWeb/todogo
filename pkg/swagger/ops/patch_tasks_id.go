// Code generated by go-swagger; DO NOT EDIT.

package ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchTasksIDHandlerFunc turns a function with the right signature into a patch tasks ID handler
type PatchTasksIDHandlerFunc func(PatchTasksIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchTasksIDHandlerFunc) Handle(params PatchTasksIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchTasksIDHandler interface for that can handle valid patch tasks ID params
type PatchTasksIDHandler interface {
	Handle(PatchTasksIDParams, interface{}) middleware.Responder
}

// NewPatchTasksID creates a new http.Handler for the patch tasks ID operation
func NewPatchTasksID(ctx *middleware.Context, handler PatchTasksIDHandler) *PatchTasksID {
	return &PatchTasksID{Context: ctx, Handler: handler}
}

/*
	PatchTasksID swagger:route PATCH /tasks/{id} patchTasksId

Update task by id
*/
type PatchTasksID struct {
	Context *middleware.Context
	Handler PatchTasksIDHandler
}

func (o *PatchTasksID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchTasksIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchTasksIDBody patch tasks ID body
//
// swagger:model PatchTasksIDBody
type PatchTasksIDBody struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this patch tasks ID body
func (o *PatchTasksIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchTasksIDBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("update_task"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

func (o *PatchTasksIDBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("update_task"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch tasks ID body based on context it is used
func (o *PatchTasksIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchTasksIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchTasksIDBody) UnmarshalBinary(b []byte) error {
	var res PatchTasksIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
