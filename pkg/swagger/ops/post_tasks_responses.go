// Code generated by go-swagger; DO NOT EDIT.

package ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostTasksNoContentCode is the HTTP code returned for type PostTasksNoContent
const PostTasksNoContentCode int = 204

/*
PostTasksNoContent Task was created

swagger:response postTasksNoContent
*/
type PostTasksNoContent struct {
}

// NewPostTasksNoContent creates PostTasksNoContent with default headers values
func NewPostTasksNoContent() *PostTasksNoContent {

	return &PostTasksNoContent{}
}

// WriteResponse to the client
func (o *PostTasksNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostTasksInternalServerErrorCode is the HTTP code returned for type PostTasksInternalServerError
const PostTasksInternalServerErrorCode int = 500

/*
PostTasksInternalServerError Server error

swagger:response postTasksInternalServerError
*/
type PostTasksInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostTasksInternalServerError creates PostTasksInternalServerError with default headers values
func NewPostTasksInternalServerError() *PostTasksInternalServerError {

	return &PostTasksInternalServerError{}
}

// WithPayload adds the payload to the post tasks internal server error response
func (o *PostTasksInternalServerError) WithPayload(payload string) *PostTasksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post tasks internal server error response
func (o *PostTasksInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTasksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
